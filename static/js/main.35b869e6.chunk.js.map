{"version":3,"sources":["formulae.js","FormulaInputs.jsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["formulae","ttl","alg","rev","exp","mth","args","unit","lia","eq","ass","end","beg","pv","i","n","fv","m","Math","v","p","inv","ard","apd","nfmt","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","pfmt","style","cfmt","currency","formatResult","number","isNaN","format","FormulaInputs","props","initial","useReducer","state","newState","fStates","setfStates","useState","fResult","setfResult","handleInput","e","target","name","Number","value","useEffect","Object","values","className","entries","map","k","htmlFor","type","inputMode","pattern","onChange","onFocus","select","FormulaBox","Provider","Node","formula","FormulaGrid","fList","frms","push","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35b869e6.chunk.js","sourcesContent":["export const formulae = [\n    {\n        ttl: \"Profit\",\n        alg: (rev, exp) => (rev - exp),\n        mth: `\\\\text{Revenue} - \\\\text{Expenses}`,\n        args: [\"Revenue\", \"Expenses\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"Total Assets\",\n        alg: (lia, eq) => (lia + eq),\n        mth: `\\\\text{Liabilities} + \\\\text{Equity}`,\n        args: [\"Liabilities\", \"Equity\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"Net Working Capital\",\n        alg: (ass, lia) => (ass - lia),\n        mth: `\\\\text{Assets} - \\\\text{Liabilities}`,\n        args: [\"Assets\", \"Liabilities\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"Change in Cash Balance\",\n        alg: (end, beg) => (end - beg),\n        mth: `\\\\text{Ending Balance} - \\\\text{Beginning Balance}`,\n        args: [\"Ending\", \"Beginning\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"Simple Interest for One Period\",\n        alg: (pv, i) => (pv * i),\n        mth: `PV_0 \\\\times i`,\n        args: [\"Present Value\", \"Interest Rate\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"Future Value using Simple Interest\",\n        alg: (pv, i, n) => (pv * (1 + (i * n))),\n        mth: `PV\\\\left(1+in\\\\right)`,\n        args: [\"Present Value\", \"Interest Rate\", \"Periods\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"Present Value using Simple Interest\",\n        alg: (fv, i, n) => (fv * (1 / (1 + (i * n)))),\n        mth: `FV_n \\\\times \\\\frac{1}{1+in}`,\n        args: [\"Future Value\", \"Interest Rate\", \"Periods\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"Future Value using Compound Interest\",\n        alg: (pv, i, m, n) => (pv * ((1 + (i / m)) ** (m * n))),\n        mth: `PV \\\\left(1+\\\\frac{i}{m} \\\\right) ^{m \\\\times n}`,\n        args: [\"Present Value\", \"Annual Interest Rate\", \"Compounding Periods per Year\", \"Years\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"Present Value using Compound Interest\",\n        alg: (fv, i, m, n) => (fv * (1 / ((1 + (i / m))**m))),\n        mth: `FV_n \\\\times \\\\frac{1}{\\\\left(1+\\\\frac{i}{m}\\\\right)^{m\\\\times n}}`,\n        args: [\"Future Value\", \"Annual Interest Rate\", \"Compounding Periods per Year\", \"Years\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"Effective Annual Rate of Interest (EAR)\",\n        alg: (i, m) => (((1 + (i / m)) ** m) - 1),\n        mth: `\\\\left(1+\\\\frac{i}{m}\\\\right)-1`,\n        args: [\"Interest Rate per Period\", \"Compounding Periods per Year\"],\n        unit: \"%\"\n    },\n    {\n        ttl: \"EAR with Continuous Compounding\",\n        alg: (i) => (Math.exp(i) - 1),\n        mth: `e^i - 1`,\n        args: [\"Annual Interest Rate\"],\n        unit: \"%\"\n    },\n    {\n        ttl: \"72 Rule\",\n        alg: (i) => (72 / (i*100)),\n        mth: `\\\\frac{72}{100i}`,\n        args: [\"Annual Interest Rate\"],\n        unit: \"years\"\n    },\n    {\n        ttl: \"Promissory Note Interest Rate\",\n        alg: (v, p, n) => (((v-p)/p) * (1/(n/365))),\n        mth: `\\\\frac{V-P}{P} \\\\times \\\\frac{1}{n \\\\div 365}`,\n        args: [\"Present Value\", \"Principle\", \"Periods\"],\n        unit: \"%\"\n    },\n    {\n        ttl: \"Cash Conversion Cycle\",\n        alg: (inv, ard, apd) => (inv + ard - ard),\n        mth: `\\\\text{Inventory} + \\\\text{AR} - \\\\text{AP}`,\n        args: [\"Inventory Days\", \"Accounts Recievable Days\", \"Accounts Payable Days\"],\n        unit: \"days\"\n    },\n    {\n        ttl: \"Current Ratio\",\n        alg: (ass, lia) => (ass / lia),\n        mth: `\\\\frac{\\\\text{Current Assets}}{\\\\text{Current Liability}}`,\n        args: [\"Current Assets\", \"Current Liability\"],\n        unit: \"%\"\n    },\n    {\n        ttl: \"Acid-test Ratio\",\n        alg: (ass, inv, lia) => ((ass - inv) / lia),\n        mth: `\\\\frac{\\\\text{Current Assets} - \\\\text{Inventory}}{\\\\text{Current Liability}}`,\n        args: [\"Current Assets\", \"Inventory\", \"Current Liability\"],\n        unit: \"%\"\n    },/*\n    {\n        ttl: \"Accounts Recievable Days\",\n        alg: () => (),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"days\"\n    },\n    {\n        ttl: \"Accounts Receivable Turnover\",\n        alg: () => (),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"Inventory Days\",\n        alg: () => (),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"days\"\n    },\n    {\n        ttl: \"Inventory Turnover\",\n        alg: () => (),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"Accounts Payable Days Outstanding\",\n        alg: () => (),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"days\"\n    },\n    {\n        ttl: \"Debt Ratio\",\n        alg: () => (),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"%\"\n    },\n    {\n        ttl: \"Debt-to-Equity Ratio\",\n        alg: () => (),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"%\"\n    },\n    {\n        ttl: \"Interest Coverage Ratio\",\n        alg: () => (),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"%\"\n    },\n    {\n        ttl: \"Total Asset Turnover\",\n        alg: () => (),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"Fixed Asset Turnover\",\n        alg: () => (),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"Gross Profit Margin\",\n        alg: () => (),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"%\"\n    },\n    {\n        ttl: \"Operating Profit Margin\",\n        alg: () => (),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"%\"\n    },\n    {\n        ttl: \"Net Profit Margin\",\n        alg: () => (),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"%\"\n    },\n    {\n        ttl: \"Return on Assets\",\n        alg: () => (),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"%\"\n    },\n    {\n        ttl: \"Return on Equity\",\n        alg: () => (),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"%\"\n    },\n    {\n        ttl: \"Return on Equity (DuPont Analysis)\",\n        alg: () => (),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"%\"\n    },\n    {\n        ttl: \"Price-Earnings ratio\",\n        alg: () => (),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"%\"\n    },\n    {\n        ttl: \"Market-to-Book ratio\",\n        alg: () => (),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"%\"\n    },/*\n{\n        ttl: \"\",\n        alg: () => {},\n        mth: ``,\n    },\n{\n        ttl: \"\",\n        alg: () => {},\n        mth: ``,\n    },\n{\n        ttl: \"\",\n        alg: () => {},\n        mth: ``,\n    },\n{\n        ttl: \"\",\n        alg: () => {},\n        mth: ``,\n    },\n{\n        ttl: \"\",\n        alg: () => {},\n        mth: ``,\n    },\n{\n        ttl: \"\",\n        alg: () => {},\n        mth: ``,\n    },\n{\n        ttl: \"\",\n        alg: () => {},\n        mth: ``,\n    },\n{\n        ttl: \"\",\n        alg: () => {},\n        mth: ``,\n    },\n{\n        ttl: \"\",\n        alg: () => {},\n        mth: ``,\n    },\n{\n        ttl: \"\",\n        alg: () => {},\n        mth: ``,\n    },*/\n]","import { useState, useReducer, useEffect } from 'react';\n\nconst nfmt = new Intl.NumberFormat('en-AU', { minimumFractionDigits: 2, maximumFractionDigits: 2 });\nconst pfmt = new Intl.NumberFormat('en-AU', { style: 'percent', maximumFractionDigits: 4 });\nconst cfmt = new Intl.NumberFormat('en-AU', { style: 'currency', currency: 'AUD' });\n\nconst formatResult = (number, unit) => {\n    if (isNaN(number)) { number = 0; }\n\n    switch (unit) {\n        case 'days':\n            return nfmt.format(number) + ' days';\n            break;\n        case 'years':\n            return nfmt.format(number) + ' years';\n            break;\n        case '%':\n            return pfmt.format(number);\n            break;\n        case '$':\n        default:\n            return cfmt.format(number);\n            break\n    }\n}\n\nexport const FormulaInputs = (props) => {\n    let initial = {}\n    for (const k of props.args) {\n        initial[k] = 0\n    }\n\n    const [fStates, setfStates] = useReducer(\n        (state, newState) => ({ ...state, ...newState })\n        , initial);\n    const [fResult, setfResult] = useState(0)\n\n    const handleInput = (e) => {\n        setfStates({ [e.target.name]: Number(e.target.value) })\n\n    }\n\n    useEffect(() => {\n        setfResult(props.alg(...Object.values(fStates)))\n    }, [fStates, props])\n\n    return (\n        <div className=\"formula-inputs\">\n            <div className=\"formula-incont\">\n                {Object.entries(fStates).map(([k, v]) => (\n                    <div key={k} className=\"formula-inbox\">\n                        <label htmlFor={k}>{k}</label>\n                        <input type=\"number\" inputMode=\"decimal\" pattern=\"[0-9]*\" name={k} value={v} onChange={handleInput} onFocus={e => e.target.select()} />\n                    </div>\n                ))}\n            </div>\n            <p>{formatResult(fResult, props.unit)}</p>\n        </div>\n    )\n}","import React from 'react';\nimport MathJax from 'react-mathjax';\nimport { formulae } from './formulae';\n\nimport { FormulaInputs } from './FormulaInputs'\n\nimport './App.css';\n\ninterface Formula {\n  ttl: string,\n  alg: Function,\n  mth: string,\n  args: string[],\n  unit: string\n}\n\nconst FormulaBox = (props: Formula) => {\n  return (\n    <div className=\"Formula-Box\">\n      <h2 className=\"formula-content\">{props.ttl}</h2>\n      <div className=\"formula-math\">\n        <MathJax.Provider>\n          <MathJax.Node formula={props.mth} />\n        </MathJax.Provider>\n      </div>\n      <FormulaInputs alg={props.alg} args={props.args} unit={props.unit} />\n    </div>\n  )\n}\n\ninterface GridProps {\n  frms: Formula[]\n}\n\nconst FormulaGrid = (props: GridProps) => {\n  let fList: JSX.Element[] = []\n\n  for (const formula of props.frms) {\n\n    fList.push(<FormulaBox key={formula.ttl} {...formula} />)\n\n  }\n\n  return (\n    <div className=\"Formula-Grid\">\n      {fList}\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FormulaGrid frms={formulae} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}