{"version":3,"sources":["formulae.js","FormulaInputs.jsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["formulae","ttl","alg","rev","exp","mth","args","unit","lia","eq","ass","end","beg","pv","i","n","fv","m","nfmt","Intl","NumberFormat","cfmt","style","currency","formatResult","number","format","FormulaInputs","props","initial","useReducer","state","newState","fStates","setfStates","useState","fResult","setfResult","handleInput","e","target","name","Number","value","useEffect","console","log","Object","values","className","entries","map","k","v","htmlFor","type","pattern","onChange","onFocus","select","FormulaBox","Provider","Node","formula","FormulaGrid","fList","frms","push","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6775b65d.chunk.js","sourcesContent":["export const formulae = [\n    {\n        ttl: \"Profit\",\n        alg: (rev, exp) => (rev - exp),\n        mth: `\\\\text{Revenue} - \\\\text{Expenses}`,\n        args: [\"Revenue\", \"Expenses\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"Total Assets\",\n        alg: (lia, eq) => (lia + eq),\n        mth: `\\\\text{Liabilities} + \\\\text{Equity}`,\n        args: [\"Liabilities\", \"Equity\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"Net Working Capital\",\n        alg: (ass, lia) => (ass - lia),\n        mth: `\\\\text{Assets} - \\\\text{Liabilities}`,\n        args: [\"Assets\", \"Liabilities\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"Change in Cash Balance\",\n        alg: (end, beg) => (end - beg),\n        mth: `\\\\text{Ending Balance} - \\\\text{Beginning Balance}`,\n        args: [\"Ending\", \"Beginning\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"Simple Interest for One Period\",\n        alg: (pv, i) => (pv * i),\n        mth: `PV_0 \\\\times i`,\n        args: [\"Present Value\", \"Interest Rate\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"Future Value using Simple Interest\",\n        alg: (pv, i, n) => (pv * (1 + (i * n))),\n        mth: `PV\\\\left(1+in\\\\right)`,\n        args: [\"Present Value\", \"Interest Rate\", \"Periods\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"Present Value using Simple Interest\",\n        alg: (fv, i, n) => (fv * (1 / (1 + (i * n)))),\n        mth: `FV_n \\\\times \\\\frac{1}{1+in}`,\n        args: [\"Future Value\", \"Interest Rate\", \"Periods\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"Future Value using Compound Interest\",\n        alg: (pv, i, m, n) => (pv * ((1 + (i / m)) ** (m * n))),\n        mth: `PV \\\\left(1+\\\\frac{i}{m} \\\\right) ^{m \\\\times n}`,\n        args: [\"Present Value\", \"Annual Interest Rate\", \"Compounding Periods per Year\", \"Years\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"Present Value using Compound Interest\",\n        alg: (fv, i, m, n) => (fv * (1 / ((1 + (i / m))**m))),\n        mth: `FV_n \\\\times \\\\frac{1}{\\\\left(1+\\\\frac{i}{m}\\\\right)^{m\\\\times n}}`,\n        args: [\"Future Value\", \"Annual Interest Rate\", \"Compounding Periods per Year\", \"Years\"],\n        unit: \"$\"\n    },/*\n    {\n        ttl: \"\",\n        alg: () => ( ),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"\",\n        alg: () => ( ),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"\",\n        alg: () => ( ),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"\",\n        alg: () => ( ),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"\",\n        alg: () => ( ),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"\",\n        alg: () => ( ),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"\",\n        alg: () => ( ),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"\",\n        alg: () => ( ),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"\",\n        alg: () => ( ),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"\",\n        alg: () => ( ),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"\",\n        alg: () => ( ),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"\",\n        alg: () => ( ),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"\",\n        alg: () => ( ),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"\",\n        alg: () => ( ),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"\",\n        alg: () => ( ),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"\",\n        alg: () => ( ),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"\",\n        alg: () => ( ),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"\",\n        alg: () => ( ),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"\",\n        alg: () => ( ),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"\",\n        alg: () => ( ),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"\",\n        alg: () => ( ),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"\",\n        alg: () => ( ),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"\",\n        alg: () => ( ),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"\",\n        alg: () => ( ),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },\n    {\n        ttl: \"\",\n        alg: () => ( ),\n        mth: ``,\n        args: [\"\", \"\"],\n        unit: \"$\"\n    },/*\n{\n        ttl: \"\",\n        alg: () => {},\n        mth: ``,\n    },\n{\n        ttl: \"\",\n        alg: () => {},\n        mth: ``,\n    },\n{\n        ttl: \"\",\n        alg: () => {},\n        mth: ``,\n    },\n{\n        ttl: \"\",\n        alg: () => {},\n        mth: ``,\n    },\n{\n        ttl: \"\",\n        alg: () => {},\n        mth: ``,\n    },\n{\n        ttl: \"\",\n        alg: () => {},\n        mth: ``,\n    },\n{\n        ttl: \"\",\n        alg: () => {},\n        mth: ``,\n    },\n{\n        ttl: \"\",\n        alg: () => {},\n        mth: ``,\n    },\n{\n        ttl: \"\",\n        alg: () => {},\n        mth: ``,\n    },\n{\n        ttl: \"\",\n        alg: () => {},\n        mth: ``,\n    },*/\n]","import { useState, useReducer, useEffect } from 'react';\n\nconst nfmt = new Intl.NumberFormat('en-AU');\nconst cfmt = new Intl.NumberFormat('en-AU', { style: 'currency', currency: 'AUD' });\n\nconst formatResult = (number, unit) => {\n    switch (unit) {\n        case 'days':\n            return nfmt.format(number) + ' days';\n            break;\n        case '$':\n        default:\n            return cfmt.format(number);\n            break\n    }\n}\n\nexport const FormulaInputs = (props) => {\n    let fList = []\n    let initial = {}\n    for (const k of props.args) {\n        initial[k] = 0\n    }\n\n    const [fStates, setfStates] = useReducer(\n        (state, newState) => ({ ...state, ...newState })\n        , initial);\n    const [fResult, setfResult] = useState(0)\n\n    const handleInput = (e) => {\n        setfStates({ [e.target.name]: Number(e.target.value) })\n\n    }\n\n    useEffect(() => {\n        console.log(fStates)\n        setfResult(props.alg(...Object.values(fStates)))\n    }, [fStates])\n\n    return (\n        <div className=\"formula-inputs\">\n            {Object.entries(fStates).map(([k, v]) => (\n                <div key={k} className=\"formula-inbox\">\n                    <label htmlFor={k}>{k}</label>\n                    <input type=\"number\" pattern=\"[0-9]*\" name={k} value={v} onChange={handleInput} onFocus={e => e.target.select()} />\n                </div>\n            ))}\n            <p className=\"formula-result\">{formatResult(fResult, props.unit)}</p>\n        </div>\n    )\n}","import React from 'react';\nimport MathJax from 'react-mathjax';\nimport { formulae } from './formulae';\n\nimport { FormulaInputs } from './FormulaInputs'\n\nimport './App.css';\n\ninterface Formula {\n  ttl: string,\n  alg: Function,\n  mth: string,\n  args: string[],\n  unit: string\n}\n\nconst FormulaBox = (props: Formula) => {\n  return (\n    <div className=\"Formula-Box\">\n      <h2 className=\"formula-content\">{props.ttl}</h2>\n      <MathJax.Provider>\n        <MathJax.Node formula={props.mth} />\n      </MathJax.Provider>\n      <FormulaInputs alg={props.alg} args={props.args} unit={props.unit} />\n    </div>\n  )\n}\n\ninterface GridProps {\n  frms: Formula[]\n}\n\nconst FormulaGrid = (props: GridProps) => {\n  let fList: JSX.Element[] = []\n\n  for (const formula of props.frms) {\n\n    fList.push(<FormulaBox key={formula.ttl} {...formula} />)\n\n  }\n\n  return (\n    <div className=\"Formula-Grid\">\n      {fList}\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FormulaGrid frms={formulae} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}